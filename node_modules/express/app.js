var express = require('express');
var app = express();

//var serverjs = require(__dirname + "/server-js/hotvideos.js");

var port = process.env.PORT || 3000;


app.use(express.static(__dirname + '/views'));
app.use(express.static(__dirname + '/js'));
app.use(express.static(__dirname + '/css'));
app.use(express.static(__dirname + '/res'));

//app.use(express.static(__dirname + '/server-js'));

app.set('view engine', 'jade');


app.get('/', function (req, res) {
	
	//data = serverjs.getAllVideos();

	res.sendFile('index.html');

	res.sendFile('reddit.js');
	res.sendFile('youtube.js');
	res.sendFile('usercontrol.js');
	
	res.sendFile('styles.css');
	
	res.sendFile('arrowLeft.png');
	res.sendFile('arrowLeft.png');
	res.sendFile('white.png');
	//res.send(data);
	//res.sendFolder('/js');
});

app.get('/*', function (req, res) {
	var resp = queueToString();
	res.send(resp);
	///.always(function() {//is returned as deffered object
	// });;
});


var server = app.listen(port, function () {

  var host = server.address().address;
  var port = server.address().port;

  console.log('Example app listening at http://%s:%s', host, port);

});



var request = require("request");
var queue = [];
var tempqueue = [];
var subreddits = ['videos', 'gifs', 'all', 'youtubehaiku', 'deepintoyoutube', 'StandUpComedy', 'fail', 'gopro', 'ContagiousLaughter',
	'todayilearned', 'LearnUselessTalents','Music', 'listentothis', 'hiphopheads','sports' , 'nba', 'soccer', 'nfl',
	'UnexpectedThugLife', 'space', 'PublicFreakout', 'StreetFights', 'respectporn'];
var banned = ['leagueoflegends','hearthstone','smashbros','tf2','DotA2','gamegrumps','2007scape', 'wow', 'GrandTheftAutoV_PC','Games','Minecraft', 'KotakuInAction','GlobalOffensive'];
var subrednum = 0;
var last = "null";
var resourceUrl;
var page = 0;
var MAX_PAGE = 20;

setInterval(function(){
  loadVideos();
}, 5*1000);

function loadVideos() {
	if(subrednum == subreddits.length) return;
	//resourceUrl = "https://www.reddit.com/r/all/.json?limit=60&after=" + last;

	var url = "https://www.reddit.com/domain/youtube.com/.json?limit=60&after=" + last;
	getVideos(url);
}



var tempyttrendsqueue = [];
function loadYTTrendsVideos(){
	var url = "https://gdata.youtube.com/feeds/api/standardfeeds/on_the_web?alt=json";
	getYTTrendsVideos(url);
}


function getYTTrendsVideos(url) {
	var jsonres;
	request({
		url: url,
		json: true
	}, function (error, response, body) {
		if (!error && response.statusCode === 200) {
			procYTTrendsVideos(body);
			queue = cleanQueue(tempyttrendsqueue);
			tempyttrendsqueue = [];
			console.log('Refreshed cache');
		}else{
			console.log(error);
		}
	});
}

function procYTTrendsVideos(data){
	for(var i = 0; i < data.feed.entry.length; i++){
		item = data.feed.entry[i];
		tempyttrendsqueue.push([item["media$group"]["yt$videoid"]["$t"], item.title['$t']]);
	}
}



function getVideos(url) {
	var jsonres;
	request({
		url: url,
		json: true
	}, function (error, response, body) {
		if (!error && response.statusCode === 200) {
			procVideos(body);
			if(++page >= MAX_PAGE){
				queue = cleanQueue(tempqueue);
				tempqueue = [];
				last = "null";
				page = 0;
				console.log('Refreshed cache');
			}
		}else{
			console.log(error);
		}
	});
}

function procVideos(data){
	for(var i = 0; i < data.data.children.length; i++){
		item = data.data.children[i];
		var dom = item.data.domain;
		if(!isBanned(item.data.subreddit) && dom == "youtube.com"){
			var vidurl = item.data.url;
			if(vidurl !== null && vidurl !== undefined){
				var vidtitle = item.data.title;
				tempqueue.push([vidurl.substring(vidurl.indexOf('v=')+2), vidtitle]);
			}
		}
	}
	last = data.data.after;
}

function isBanned(subreddit){
	for(var i = 0; i < banned.length; i++){
		if(banned[i]==subreddit){
			return true;
		}
	}
	return false;
}


function queueToString(){
	if(queue.length==0) return "[]";
	var str = "[";
	for(var i = 0; i < queue.length; i++){
		while(queue[i][1].indexOf("\"")!=-1) queue[i][1] = queue[i][1].replace('\"','');
		str += "[\"" + queue[i][0]+"\",\""+queue[i][1]+ "\"],";
	}
	str = str.substring(0,str.length-1) + "]";
	return str;
}

//remove duplicates
function cleanQueue(queue){
	var hashtable = {};
	var newqueue = [];
	for(var i = 0; i < queue.length; i++){
		if(hashtable[queue[i][0]] != "true"){
			newqueue.push(queue[i]);
			hashtable[queue[i][0]] = "true";
		}
	}
	return newqueue;
}






